[
["index.html", "R Programming for Research Chapter 1 Course overview", " R Programming for Research Colorado State University, ERHS 535 Brooke Anderson and Rachel Severson 2016-08-17 Chapter 1 Course overview This document provides the course notes for Colorado State University’s ERHS 535 course for Fall 2016. The course covers four large themes in R programming for research: Entering and cleaning data Exploring data Reporting data results Reproducible research "],
["course-information.html", "Chapter 2 Course information 2.1 Course plan 2.2 Detailed overview 2.3 Graded materials", " Chapter 2 Course information 2.1 Course plan After a preliminary week, there will be three “cycles” covering these topics: Preliminaries Week 1, August 22 Basic Weeks 2–5, August 29, September 12, 19, and 26 Intermediate Weeks 6–9, October 3, 10, 17, and 24 Advanced Weeks 10–13, October 31, November 7, 14, and 28 Final Week 14, December 5 2.2 Detailed overview 2.2.1 Preliminaries Week 1 (August 22). Preliminaries: Downloading R and RStudio; A tour of the R Studio interface; Finding course materials on GitHub; The very basics of using R– Reading in basic datasets, most basic objects (dataframes, vectors), using indexing to pull out parts of objects; What are packages in R? Using packages in R 2.2.2 Basic These are skills you will use all the time and will need to know by heart to use R productively for academic research. These are the bare minimum you will need to know to be an R user. Week 2 (August 29). Entering and cleaning data 1: What are flat files (.csv, .txt, etc.)? How to enter different types of flat files using the read.table() group of functions; How do get data into R from other common file formats (e.g., Excel, SAS); How to read flat files directly from the internet; How to use basic subsetting in R to pick out certain parts of the data; Basics of logic operators; Vector classes and how to convert a vector into the date class; Basics of date formats; Introduction to writing code in a script file, to use later, rather than running all commands from R Studio command line; Explanation of importance of using a script file to save all code used to clean up original data Week 3 (September 12). Exploring data 1: What can go wrong when reading in data? How to use str(), summary(), head(), tail(), and dim() to do basic checks on data; Using R’s base plot functions to plot data; Using basic plots to looks for outliers, patterns in missing data, etc.; How to write your data out to other files for others to use; Role of README files in explaining data files to other users; The basics of using R for statistical tests and fitting basic GLMs (e.g., t.test(), lm(), glm(), anova()); How to use help functions, Google, and StackOverflow to get help with R; R cheat sheets Week 4 (September 19). Reporting data results 1: Basic plotting functions; Principles of R’s default plotting; Difference between default plotting and plotting using ggplot2; Basics of using ggplot2 to create publication-quality plots in R; How to save plots as pdf or graphics files; Basic principles of creating effective graphs (e.g., Tufte, Howard Wainer) Week 5 (September 26). Reproducible research 1: What is a mark-up language? Writing a basic document in Markdown and compiling it to HTML code; What is the knitr package and how does it work? Writing a basic RMarkdown document that includes R code; Finding and using the RMarkdown cheat sheet; A very basic introduction to what Tex and LaTex are and how they work into reproducible research in R; Why is it important to make your research reproducible? 2.2.3 Intermediate These are skills you will use regularly as you become a better R programmer. These skills will really increase your ability to do efficient, reproducible, and publication-ready academic research. Week 6 (October 3). Entering and cleaning data 2: Using Hadley Wickham’s tools to clean up data; What is piping / chaining? How to use the pipe function; Using tools from the dplyr package to clean up and merge data; What does it mean to reshape data and when would you need to do that? Using tools from the tidyr package to reshape data; Listing files within a directory; What is a loop? Using a loop to read, clean, and re-save all files in a directory Week 7 (October 10). Exploring data 2: More about fitting GLMs to data in R; Using dplyr functions to summarize data by groups to explore patterns; Dates and times in R; What are functions? Writing functions for tasks you do often. Week 8 (October 17). Reporting data results 2: More on the principles of creating effective graphs (e.g., Tufte, Wainer); Basics of creating effective tables (e.g., Wainer); Intermediate / advanced ggplot to create fancier plots in R, including changing themes, using faceting, adding regression lines and smooth lines; Adding text to graphs; How to use Google Images and RPubs to get new ideas for ways to present data and R code to start from Week 9 (October 24). Reproducible research 2: Using kable to write out tables in RMarkdown documents; Introduction to BibTex for including citations in reproducible documents; Creating a presentation using RMarkdown; An introduction to using RPubs to publish RMarkdown documents; Hadley Wickham’s style guides for R and why style in code is important 2.2.4 Advanced These are skills that are great for you to know about, although you may not use them all the time (or may not use them in your research yet). Hopefully, as you continue to use R in your academic research, you will have times when you’ll want to do some of these things, and they are very powerful ways to use R, which will really set you apart from many other students outside of computer science. Week 10 (October 31). Entering and cleaning data 3: How is data published online? A few of the ways to pull data directly from the web (e.g., reading csv files directly, using the download.file() function, etc.); A very basic introduction to some of the more complex on-line formats (XML, JSON); What is an API? Examples of how people have used APIs to pull in information from Google Maps and Twitter; Using the substr() function; What are regular expressions? Using regular expressions as a powerful way to clean up and explore data; Introduction to using readLines() to read in very messy data Week 11 (November 7). Exploring data 3: More on creating your own functions to work with your data; The very basics of using R to explore interesting questions using simulations; Basics of geographic data in R; Overview of how R is being used in research in a variety of areas– Statistical Genetics, Environmental Epidemiology, Econometrics, Ecology, Phylogenetics, Machine Learning–and what resources exist to learn more about how to use R for a research area you’re interested in Week 12 (November 14). Reporting data results 3: An overview of grid graphics and how it can be used to make customized graphics; Where to find out more about how to use grid graphics; How to use R to create interactive data displays: Shiny, htmlWidgets Week 13 (November 28). Reproducible research 3: An in-depth look at what R packages are and how they work; Why would you want to create an R package? The basics of how to create R packages; How can you publish a package for others to use? An introduction to package vignettes and the Journal of Statistical Software; An introduction to tools for reproducible research in other languages (e.g., SAS) 2.2.5 Final week Week 14 (December 5). Wrapping up: Final project reports; Students’ choice of lecture 2.3 Graded materials Quizzes. You will have in-class quizzes on the following dates: August 29 September 12 September 19 September 26 October 3 October 10 October 17 October 24 Homework Assignments. You will have homework assigments due by email by noon the Friday following every class meeting: August 26 September 2 September 16 September 23 September 30 October 7 October 14 October 21 October 28 November 4 November 11 November 18 December 2 December 9 (final project) Final Project. You will present your final project during our last day of class, December 5. The final write-up of your project will be due to me by email by 12:00 pm (noon) the following Friday, December 9. "],
["r-preliminaries.html", "Chapter 3 R Preliminaries 3.1 R and R Studio 3.2 The “package” system 3.3 Some basics of R code 3.4 R’s most basic object types 3.5 Functions 3.6 In-course Exercise", " Chapter 3 R Preliminaries 3.1 R and R Studio 3.1.1 What is R? A statistical programming language Open-source A core package with many available user-created add-ons (packages) R is currently popular in a number of fields, including: Statistics Machine learning Data journalism / Data analysis “The best thing about R is that it was developed by statisticians. The worst thing about R is that… it was developed by statisticians.” -Bo Cowgill, Google, at the Bay Area R Users Group 3.1.2 Gratis vs. libre Gratis: Free as in beer Libre: Free as in speech With open-source software (free as in speech), you can: Check out the code to figure out how the software works Share the code (and software) with other people Make any changes you want to the code 3.1.3 What is RStudio? RStudio is a user interface for R. You download it separately, but it’s a “nicer” way to work in R. RStudio (the company) currently: Develops and freely provides the RStudio IDE Provides excellent resources for learning and using R (cheatsheets, ) Is producing some of the most-used R packages Employees some of the top people in R development 3.1.4 Setting up If do not already have them, you will need to download and install both R and RStudio. Go to CRAN and download the latest version of R for your system. Install. Go to the RStudio download page and download the latest version of RStudio for your system. Install. Defaults should be fine for everything. 3.2 The “package” system 3.2.1 R packages Your original download of R is only a starting point: To take full advantage of R, you’ll want to add on packages: You can get packages to add-on to your version of R from: CRAN (currently 7050 available packages) GitHub Your friends and collaborators Make them yourself 3.2.2 Installing from CRAN The most popular place from which to get packages is currently CRAN. You can install packages from CRAN using R code. For example, to get the package phonenumber, you could use: install.packages(&quot;phonenumber&quot;) 3.2.3 Loading an installed package Once you have a package, you can load it to an R session using the library() function. library(phonenumber) Once it’s loaded, you can use all its functions. fedex_number &lt;- &quot;GoFedEx&quot; letterToNumber(fedex_number) ## [1] &quot;4633339&quot; 3.3 Some basics of R code 3.3.1 R’s MVP: &lt;- &lt;- is R’s assignment operator. It takes whatever you’ve created on the right hand side of the &lt;- and saves it as an object with the name you put on the left hand side of the &lt;- : ## Note: Generic code-- this will not work [name of object] &lt;- [thing I want to save] For example, if I just type &quot;GoFedEx&quot;, R will print it back to me, but won’t save it anywhere for me to use later: &quot;GoFedEx&quot; ## [1] &quot;GoFedEx&quot; However, if I assign it to an object, I can print it out or use it later by referencing that object name: fedex_number &lt;- &quot;GoFedEx&quot; fedex_number ## [1] &quot;GoFedEx&quot; letterToNumber(fedex_number) ## [1] &quot;4633339&quot; 3.3.2 &lt;- vs. = You can make assignments using either &lt;- or =, and you’ll see both when you’re reading other people’s code. However, R gurus advise using &lt;- in your own code, and as you move to doing more complex things, problems might crop up if you use =. For now, though, it will be helpful for you to know that these two calls do the same thing: one_to_ten &lt;- 1:10 one_to_ten ## [1] 1 2 3 4 5 6 7 8 9 10 one_to_ten = 1:10 one_to_ten ## [1] 1 2 3 4 5 6 7 8 9 10 3.3.3 Naming objects “There are only two hard things in Computer Science: cache invalidation and naming things.” — Phil Karlton Use only letters, numbers, and underscores Don’t start with anything but a letter From Hadley Wickham’s R style guide Use lower case for variable names (fedex_number, not FedExNumber) Use an underscore as a separator (fedex_number, not fedex.number or fedexNumber) Avoid using names that are already defined in R (e.g., don’t name an object mean, because as mean function exists) 3.4 R’s most basic object types The two most basic types of objects for data in R are vectors (1D) and dataframes (2D). 3.4.1 Vectors A vector is a string of values. All values must be of the same class (i.e., all numbers, all characters, all dates) You can use c() to join values together to create a vector The length of the vector is how many values it has in it For example: fibonacci &lt;- c(1, 1, 2, 3, 5) fibonacci ## [1] 1 1 2 3 5 length(fibonacci) ## [1] 5 An example using characters instead of numbers: one_to_five &lt;- c(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;) one_to_five ## [1] &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; &quot;five&quot; If you mix classes, it will default to most generic: mixed_classes &lt;- c(1, 3, &quot;five&quot;) mixed_classes ## [1] &quot;1&quot; &quot;3&quot; &quot;five&quot; You can pull out certain values by using indexing ([...]) to identify the locations you want to get fibonacci[2] # Get the second value ## [1] 1 fibonacci[c(1, 5)] # Get first and fifth values ## [1] 1 5 fibonacci[1:3] # Get the first three values ## [1] 1 1 2 3.4.2 Dataframes A dataframe is one or more vectors of the same length stuck together side-by-side. It is the closest R has to what you’d get with an Excel spreadsheet. You can create dataframes using the data.frame() function. However, most often you will create a dataframe by reading in data from a file using something like read.csv(). For example, to create a dataframe from vectors you already have saved as R objects: fibonacci_seq &lt;- data.frame(num_in_seq = one_to_five, fibonacci_num = fibonacci) fibonacci_seq ## num_in_seq fibonacci_num ## 1 one 1 ## 2 two 1 ## 3 three 2 ## 4 four 3 ## 5 five 5 The format for using data.frame() is: ## Note: Generic code-- this will not work [name of object] &lt;- data.frame([1st column name] = [1st column content], [2nd column name] = [2nd column content]) You can use indexing ([..., ...]) for dataframes, too, but now they’ll have two dimensions (rows, then columns). Put the rows you want before the comma, the columns after. If you want all of something, leave the designated spot blank. For example: fibonacci_seq[1:2, 2] # First two rows, second column ## [1] 1 1 fibonacci_seq[5, ] # Last row, all columns ## num_in_seq fibonacci_num ## 5 five 5 Usually, instead of creating a dataframe from vectors, you’ll read one in from data on an outside file. For example, to read in a dataset from a CSV file called daily_show_guests.csv in a subdirectory called data/: daily_show &lt;- read.csv(&quot;data/daily_show_guests.csv&quot;, header = TRUE, skip = 4) daily_show[1:2, ] ## YEAR GoogleKnowlege_Occupation Show Group Raw_Guest_List ## 1 1999 actor 1/11/99 Acting Michael J. Fox ## 2 1999 Comedian 1/12/99 Comedy Sandra Bernhard You can use the functions dim(), nrow(), and ncol to figure out the dimensions (number of rows and columns) of a dataframe: dim(daily_show) ## [1] 2693 5 nrow(daily_show) ## [1] 2693 ncol(daily_show) ## [1] 5 3.5 Functions In general, functions in R take the following structure: function.name(required information, options) ## Generic code The result of the function will be output to your R session, unless you choose to save the output in an object: new.object &lt;- function.name(required information, options) ## Generic code Examples of this structure: head(daily_show) ## YEAR GoogleKnowlege_Occupation Show Group Raw_Guest_List ## 1 1999 actor 1/11/99 Acting Michael J. Fox ## 2 1999 Comedian 1/12/99 Comedy Sandra Bernhard ## 3 1999 television actress 1/13/99 Acting Tracey Ullman ## 4 1999 film actress 1/14/99 Acting Gillian Anderson ## 5 1999 actor 1/18/99 Acting David Alan Grier ## 6 1999 actor 1/19/99 Acting William Baldwin head(daily_show, n = 3) ## YEAR GoogleKnowlege_Occupation Show Group Raw_Guest_List ## 1 1999 actor 1/11/99 Acting Michael J. Fox ## 2 1999 Comedian 1/12/99 Comedy Sandra Bernhard ## 3 1999 television actress 1/13/99 Acting Tracey Ullman daily_show &lt;- read.csv(&quot;data/daily_show_guests.csv&quot;, skip = 4, header = TRUE) Find out more about a function by using ? (e.g., ,?head, ?read.csv). This will take you to the help page for the function, where you can find out all the possible arguments for the function, required and optional. 3.6 In-course Exercise 3.6.1 About the dataset For today’s class, you’ll be using a dataset of all the guests on Jon Stewart’s The Daily Show. This data was originally collected by Nate Silver’s website, FiveThirtyEight and is available on FiveThirtyEight’s GitHub page under the Creative Commons Attribution 4.0 International License. The only change made to the original file was to add (commented) attribution information at the start of the file. First, check out a bit more about this data and its source: Check out the Creative Commons license. What are we allowed to do with this data? What restrictions are there on using the data? It’s often helpful to use prior knowledge to help check out or validate your dataset. One thing we might want to know about this data is if it covers the whole time that Jon Stewart hosted The Daily Show. Find out the dates he started and finished as host. Briefly browse around FiveThirtyEight’s GitHub data page. What are some other datasets available that you find interesting? You can scroll to the bottom of the page to get to the compiled README.md content, which gives the full titles and links to relevant datasets. You can also click on any dataset to get more information. Look at the GitHub page for this Daily Show data. How many columns will be in this dataset? What kind of information does the data include? If you have extra time: Check out the related article on FiveThirtyEight. What are some specific questions they used this data to answer for this article? Who is Nate Silver? 3.6.2 Getting the data onto your computer First, download the data from GitHub onto your computer. Put it in your directory (folder) for this course. Take the following steps to get the data onto your computer If you do not yet have a directory (folder) just for this course, make one someplace straightforward like in your home directory. Download the file from GitHub. Right click on Raw and then choose “Download linked file”. Put the file into the directory you created for this course. Find out what your home directory is in R. To do this, make sure R is set to your home directory using setwd(&quot;~&quot;), and then get R to print that home directory path using getwd(). Outside of R, open Finder (or your system’s equivalent). Go to your home directory (mine, for example, is /Users/brookeanderson). Figure out home to get from this to the directory you created for this course. For example, from my home directory, I would go Desktop to RCourseFall2015 to Week1_Aug24. Go back into R. Set R’s working directory to your directory for this class using the setwd() command, now that you know the pathname for the directory. For example, I would use setwd(&quot;Desktop/RCourseFall2015/Week1_Aug24&quot;). Use the list.files() command to make sure that the daily_show_guests.csv file is in your current working directory. The full R code for this task might look something like: setwd(&quot;~&quot;) getwd() setwd(&quot;Desktop/RCourseFall2015/Week1_Aug24&quot;) getwd() list.files() &quot;daily_show_guests.csv&quot; %in% list.files() If you have extra time: See if you can figure out the last line of code in the example R code. 3.6.3 Getting the data into R Now that you have the dataset in your working directory, you can read it into R. This dataset is in the CSV (comma separated values) format. (We will talk more about different file formats next week.) You can read csv files into R using the read.csv() function. Read the data into your R session Use the read.csv() function to read the data into R and save it as the object daily_show. Use the help file for the read.csv() function to figure out how this function works. To pull that up, use ?read.csv. Why are we using the option header = TRUE? Can you figure out why we’re using the skip option, and why it’s set to 4? Note that you need to put the file name in quotation marks. What would have happened if you’d used read.csv but hadn’t saved the result as the object daily_show? (For example, you’d run the code read.csv(&quot;daily_show_guests.csv&quot;) rather than daily_show &lt;- read.csv(&quot;daily_show_guests.csv&quot;).) Example R code: daily_show &lt;- read.csv(&quot;daily_show_guests.csv&quot;, header = TRUE, skip = 4) If you have extra time: Say this was a really big dataset. You want to check out just the first 10 rows to make sure that you’ve got your code right before you take the time to pull in the whole dataset. Use the help file for read.csv() to figure out how to only read in a few rows. Look through the help file for other options available for read.csv(). Can you think of examples when some of these options would be useful? Example R code: daily_show_first10 &lt;- read.csv(&quot;daily_show_guests.csv&quot;, header = TRUE, skip = 4, nrows = 10) daily_show_first10 3.6.4 Checking out the data You now have the data available in the daily_show option. You’ll want to check it out to make sure it read in correctly, and also to get a feel for the data. Throughout, you can use the help pages to figure out more about any of the functions being used (for example, ?dim). Take the following steps to check out the dataset Use indexing to look at the first two rows of the dataset. Based on this, what does each row “measure”? What information do you get for each “measurement”? Indexing uses square brackets immediately after the object name. If the object has two dimensions, like a dataframe (rows and columns), you put the rows you want, then a comma, then the columns you want. If you want all rows (or columns), you leave that space blank. For example, if you wanted to get the first two rows and the first three columns, you’d use daily_show[1:2, 1:3]. If you wanted to get the first five rows and all the columns, you’d use daily_show[1:5, ]. Use the dim() function to find out how many rows and columns this dataframe has. Based on what you found out about the data from the GitHub page, does it have the number of columns you expected? Based on what you know about the data (all the guests who came on The Daily Show with Jon Stewart), do you think it has about the right number of rows? Use the head() function to look at the first few rows of the dataframe. Does it look like the rows go in order by date? What was the date of Jon Stewart’s first show? Does it look like this dataset covers that first show? Use the tail() function to look at the last few rows of the dataframe. What is the last show date covered by the dataframe? Who was the last guest? Example R code: daily_show[1:2, ] dim(daily_show) head(daily_show) tail(daily_show) If you have extra time: Say you wanted to look at the first ten rows of the dataframe, rather than the first six. How could you use an option with head() to do this? Example R code: head(daily_show, n = 10) 3.6.5 Using the data to answer questions Nate Silver was a guest on The Daily Show. Let’s use this data to figure out how many times he was a guest and when he was on the show. Find out more about Nate Silver on The Daily Show Use the subset() function to create a new dataframe that only has the rows of daily_show when Nate Silve was a guest. Put it in the object nate_silver. Print out the full nate_silver dataframe by typing nate_silver. (You could just use this to answer both questions, but still try the next steps. They would be important with a bigger dataset.) To count the number of times Nate Silver was a guest, you’ll need to count the number of rows in the new dataset. You can either use the dim() function or the nrow() function to do this. What additional information does the dim() function give you? To get the dates when Nate Silver was a guest, you can print out just the Show column of the dataframe. There are a few ways you can do this using indexing: nate_silver[ , 3] (since Show is the third column), nate_silver[ , &quot;Show&quot;], or nate_silver$Show. Try these. Example R code: nate_silver &lt;- subset(daily_show, Raw_Guest_List == &quot;Nate Silver&quot;) nate_silver dim(nate_silver) nrow(nate_silver) nate_silver[ , 3] nate_silver[ , &quot;Show&quot;] If you have extra time: When you print out the Show column, why does it also print out something underneath about Levels? Hint: This has to do with the class that R has saved this column as. What class is it currently? What other classes might we want to consider converting it to as we continue working with the dataset? Check out the example code below to get some ideas. Was Nate Silver the only statistician to be a guest on the show? What were the occupations that were only represented by one guest visit? Since GoogleKnowlege_Occupation is a factor, you can use the table() function to create a new vector with the number of times each value of GoogleKnowlege_Occupation shows up. You can put this information into a new vector and then pull out only the values that equal 1 (so, only had one guest). (Note that “Statistician” doesn’t show up– there was only one person who was a guest, but he had three visits.) Pick your favorite “one-off” example and find out who the guest was for that occupation. Example R code: class(nate_silver$Show) range(nate_silver$Show) nate_silver$Show &lt;- as.Date(nate_silver$Show, format = &quot;%m/%d/%y&quot;) range(nate_silver$Show) diff(range(nate_silver$Show)) # Time between Nate&#39;s first and last shows statisticians &lt;- subset(daily_show, GoogleKnowlege_Occupation == &quot;Statistician&quot;) statisticians num_visits &lt;- table(daily_show[ , 2]) head(num_visits) # Note: This is a vector rather than a dataframe names(num_visits[num_visits == 1]) subset(daily_show, GoogleKnowlege_Occupation == &quot;chess player&quot;) subset(daily_show, GoogleKnowlege_Occupation == &quot;mathematician&quot;) subset(daily_show, GoogleKnowlege_Occupation == &quot;orca trainer&quot;) subset(daily_show, GoogleKnowlege_Occupation == &quot;Puzzle Creator&quot;) subset(daily_show, GoogleKnowlege_Occupation == &quot;Scholar&quot;) "],
["entering-and-cleaning-data.html", "Chapter 4 Entering and cleaning data", " Chapter 4 Entering and cleaning data We’ll put notes for the second week here … "],
["appendix-a-vocabulary.html", "A Appendix A: Vocabulary A.1 Week 1", " A Appendix A: Vocabulary You will be responsible for knowing the following functions and vocabulary for the weekly quizzes. A.1 Week 1 "],
["appendix-b-homework.html", "B Appendix B: Homework B.1 Homework #1", " B Appendix B: Homework The following are homework assignments for the course. B.1 Homework #1 "],
["references.html", "References", " References "]
]
