[
["index.html", "R Programming for Research Online course book, ERHS 535", " R Programming for Research Colorado State University, ERHS 535 Brooke Anderson and Rachel Severson 2016-08-21 Online course book, ERHS 535 This is the online book for Colorado State University’s ERHS 535 R Programming for Research course. This book includes course information, course notes, links to download pdfs of lecture slides, in-course exercises, homework assignments, and vocabulary lists for quizzes for this course. Because this is my first semester teaching the course with this online book, it will be evolving throughout the semester, as we get to new material. The book can be downloaded as a pdf or an eBook. To download it, use the “download” button in the top menu bar of the webpage. You can also search the book using the magnifying glass button in the top menu bar. "],
["course-information.html", "Course information 0.1 Course overview 0.2 Time and place 0.3 Detailed schedule 0.4 Grading 0.5 Weekly in-course group exercises 0.6 Helpful books for learning R", " Course information Download a pdf of the lecture slides covering this topic. 0.1 Course overview This document provides the course notes for Colorado State University’s ERHS 535 course for Fall 2016. The course offers in-depth instruction on data collection, data management, programming, and visualization, using data examples relevant to academic research. 0.2 Time and place This course meets in Room 120 of the Environmental Health Building on Mondays and Wednesdays, 10:00 am–12:00 pm. Exceptions to these meeting times are: There will be no meeting on Wednesday, Aug. 31. There will be no meeting on Labor Day (Monday, Sept. 5). To make up for missing class on Aug. 31, we will have a supplemental class on Friday, Sept. 9, 10:00 am–12:00 pm. You will not lose attendance points if you cannot attend this class, but will be responsible for the material covered. There are no course meetings the week of Thanksgiving. 0.3 Detailed schedule Here is a more detailed view of the schedule for this course for Fall 2016: Dates Level Lecture content Graded items Aug. 22, 24 Preliminary R Preliminaries Aug. 29 Basic Entering and cleaning data Quiz Sept. 7, Sept. 9* Basic Exploring data Quiz Sept. 12, 14 Basic Reporting data results Quiz, HW #1 Sept. 19, 21 Basic Reproducible Research Quiz Sept. 26, 28 Intermediate Entering and cleaning data Quiz, HW #2 Oct. 3, 5 Intermediate Exploring data Quiz Oct. 10, 12 Intermediate Reporting data results Quiz, HW #3 Oct. 17, 19 Intermediate Reproducible Research Quiz Oct. 24, 26 Advanced Entering and cleaning data HW #4 Oct. 31, Nov. 2 Advanced Exploring data Project proposal Nov. 7, 9 Advanced Reporting data results HW #5 Nov. 14, 16 Advanced Mapping in R Nov. 28, 30 Advanced Package development 1 HW #6 Dec. 5, 7 Advanced Package development 2 Project draft Week of Dec. 12 Group presentations Final project 0.4 Grading Course grades will be determined by the following five components: Assessment component Percent of grade Final group project 30 Weekly in-class quizzes, weeks 2-9 25 Homework 25 Attendance and class participation 10 Weekly in-course group exercises 10 0.4.1 Attendance and class participation Because so much of the learning for this class is through interactive work in class, it is critical that you come to class. Out of a possible 10 points for class attendance, you will get: 10 points if you attend all classes 8 points if you miss one class 6 points if you miss two classes 4 points if you miss three classes 2 points if you miss four classes 0 points if you miss five or more classes 0.5 Weekly in-course group exercises Part of each class will be spent doing in-course group exercises. Ten points of your final grade will be based on your participation in these exercises. As long as you are in class and participate in these exercises, you will get full credit for this component. If you miss a class, to get credit towards this component of your grade, you will need to turn in a one-page document describing what you learned from doing the in-course exercise on your own time. All in-class exercises are included in the online course book at the end of the chapter on the associated material. 0.5.1 In-class quizzes You will have eight total in-class quizzes. You will have one for each of the Week 2–9 class meetings. There will be at least 10 questions per quiz. You will get 1/3 point for each correct answer. If you do the math, you can get full credit for this if you get at least 75% of your answers right. You can not get more than the maximum of 25 points for this component– once you reach 25 points on quizzes, you will have achieved full credit for the quiz component of the course grade. All quiz questions will be multiple choice, matching, or some other form of “close-answered” question (i.e., no open-response-style questions). You can not make up a quiz for a class period you missed. You can still get full credit on your total possible quiz points if you miss a class, but it means you will have to work harder and get more questions right for days you are in class. Because grading format for these quizzes allows for you to miss some questions and still get the full quiz credit for the course, I will not ever re-consider the score you got on a previous quiz, give points back for a wrong answer on a poorly-worded question, etc. However, if a lot of people got a particular question wrong, I will be sure to cover it in the next class period. Also, especially if a question was poorly worded and caused confusion, I will work a similar question into a future quiz– in addition to the 10 guaranteed questions for that quiz– so every student will have the chance to get an extra 1/3 point of credit for the question. The “Vocabulary” appendix of our online book has the list of material for which you will be responsible for this quiz. Most of the functions and concepts will have been covered in class, but some may not. You are responsible for going through the list and, if there are things you don’t know or remember from class, learning them. To do this, you can use help functions in R, Google, StackOverflow, books on R, ask a friend, and any other resource you can find. In general, using R frequently in your research or other coursework will help you to prepare and do well on these quizzes. 0.5.2 Homework There will be six homework assignments, starting a few weeks into the course and then due approximately every two weeks (see the detailed schedule in the online course book for exact due dates). Homeworks should be done individually. You will get many chances to work with others during in-course exercises and your final group project, but these homeworks should be a chance to assess how well you understand and can use the course material on your own. Homeworks will be graded for correctness, but some partial credit will be given for questions you try but fail to answer correctly. If you can’t completely do a required task, be sure to show and explain what you tried to do to complete it. Homework is due by the start of class on the due date. Your grade will be reduced by 10 points for each day it is late, and will receive no credit if it is late by over a week. 0.5.3 Final group project You will do the final group project in groups of 2–3. The final product will be a statistical blog post-style article of 1,500 words or less and an accompanying Shiny web application. Come up with an interesting question you’d love to get the answer to that you think you can find data to help you answer. You will need to use the data you find, and R, to write your article. The final product will be a Word document created from an RMarkdown file and an accompanying Shiny web application. Here are some articles to give you an idea of the style and content for this project: Does Christmas come earlier each year? Hilary: the most poisoned baby name in US history Every Guest Jon Stewart Ever Had On “The Daily Show” Should Travelers Avoid Flying Airlines That Have Had Crashes in the Past? Billion-Dollar Billy Beane You will have in-class group work time during weeks 10–15 to work on this. This project will also require some work with your group outside of class. You will be able to get feedback from me through weekly informal written reports in these weeks. I will also provide feedback and help during the in-class group work time. The final group project will be graded with A through F, with the following point values (out of 25 possible): 25 points for an A 20 points for a B 15 points for a C 10 points for a D 5 points for an F If you turn nothing in, you will get 0 points. We will discuss expectations for this project, create groups, etc. around the middle of the semester. The focus for this will be on finding, cleaning, and using good data to answer an interesting question, and on presenting, summarizing, and explaining the data well. 0.6 Helpful books for learning R There are three publishers that are leaders in good books for learning R: O’Reilly No Starch Press Springer Some particular books you might want to check out: R for Data Science R for Dummies R in a Nutshell R Cookbook R Graphics Cookbook A Beginner’s Guide to R Roger Peng’s Leanpub books "],
["r-preliminaries.html", "Chapter 1 R Preliminaries 1.1 R and R Studio 1.2 The “package” system 1.3 Basic code conventions of R 1.4 R’s most basic object types 1.5 Using R functions 1.6 In-course Exercise", " Chapter 1 R Preliminaries Download a pdf of the lecture slides covering this topic. 1.1 R and R Studio 1.1.1 What is R? R in an open-source programming language that evolved from the S language. The S language was developed at Bell Labs in the 1970s, which is the same place (and about the same time) that the C programming language was developed. R itself was developed in the 1990s–2000s at the University of Auckland. It is open-source software, freely and openly distributed under the GNU General License. The base version of R that you download when you install R on your computer includes the critical code for running R, but you can also install and run “packages” that people all over the world have developed to extend R. With new developments, R is becoming more and more useful for a variety of programming tasks. However, where it really shines is in working with data and doing statistical analysis. R is currently popular in a number of fields, including: Statistics Machine learning Data journalism / data analysis R has some of the same strengths (quick and easy to code, interfaces well with other languages, easy to work interactively) and weaknesses (slower than compiled languages) as Python. For data-related tasks, R and Python are fairly neck-and-neck. However, R is still the first choice of statisticians in most fields, so I would argue that R has a an advantage if you want to have access to cutting-edge statistical methods. “The best thing about R is that it was developed by statisticians. The worst thing about R is that… it was developed by statisticians.” -Bo Cowgill, Google, at the Bay Area R Users Group 1.1.2 Open-source software R is open-source software. Many other popular statistical programming languages, conversely, are proprietary. It’s useful to know what it means for software to be “open-source”, both conceptually and in terms of how you will be able to use and add to R in your own work. R is free, and it’s tempting to think of open-source software just as “free software”. Things, however, are a little more subtle than that. It helps to consider some different meanings of the word “free”. “Free” can mean: Gratis: Free as in beer Libre: Free as in speech Open-source software software is the libre type of free. This means that, with software that is open-source, you can: Access all of the code that makes up the software Change the code as you’d like for your own applications Build on the code with your own extensions Share the software and its code, as well as your extensions, with others In practice, this means that, once you are familiar with the software, you can dig deeply into the code to figure out exactly how it’s performing certain tasks. This can be useful for finding bugs and eliminating bugs, and also can help researchers figure out if there are any limitations in how the code works for their specific research. It also means that you can build your own software on top of existing R software and its extensions. I explain a bit more about R packages a bit later, but this open-source nature of R (and other languages, including Python) has created a large community of people worldwide who develop and share extensions to R. As a result, you can pull in packages that let you do all kinds of things in R, like visualizing Tweets, cleaning up accelerometer data, analyzing complex surveys, fitting maching learning models, and a wealth of other cool things. 1.1.3 What is RStudio? To get the R software, you’ll download R from the R Project for Statistical Computing. This is enough for you to use R on your own computer. However, I would suggest one additional, free piece of software to improve your experience while working with R, RStudio. RStudio is an integrated development environment (IDE) for R. This basically means that it provides you an interface for running R and coding in R, with a lot of nice extras that will make your life easier. You download RStudio separately from R– you’ll want to download and install R itself first, and then you can download RStudio. You want the Desktop version with the free license. The company that develops this IDE is a fantastic contributer to the global R community. RStudio currently: Develops and freely provides the RStudio IDE Provides excellent resources for learning and using R (cheatsheets, ) Is producing some of the most-used R packages Employs some of the top people in R development R has been advancing by leaps in bounds in terms of what it can do and the elegance with which it does it, in large part because of the enormous contributions of people involved with RStudio. 1.1.4 Setting up If do not already have them, you will need to download and install both R and RStudio. Go to CRAN and download the latest version of R for your system. Install. Go to the RStudio download page and download the latest version of RStudio for your system. Install. Defaults should be fine for everything when you install both R and RStudio. You will want the latest stable version, rather than the development version, for this course. 1.2 The “package” system 1.2.1 R packages Your original download of R is only a starting point. To me, this is a bit like the toy train set that my son was obsessed with for a while. You first buy a very basic set that looks something like Figure 1.1. Figure 1.1: The toy version of base R. To take full advantage of R, you’ll want to add on packages. In the case of the train set, at this point, a doting grandparent adds on extensively through birthday presents, so you end up with something that looks like Figure 1.2. Figure 1.2: The toy version of what your R set-up will look like once you find cool packages to use for your research. The main source for installing packages for R remains the Comprehensive R Archive Network, or CRAN. However, GitHub is growing in popularity, especially for packages that are still in development. You can also create and share packages among your collaborators or co-workers, without ever posting them publicly. 1.2.2 Installing from CRAN The most popular place from which to get packages is currently CRAN. You can install packages from CRAN using R code. For example, telephone keypads include letters for each number (Figure 1.3), which allow companies to have “named” phone numbers that are easier for people to remember, like 1-800-GO-FEDEX and 1-800-FLOWERS. Figure 1.3: Telephone keypad with letters corresponding to each number. The phonenumber package is a cool little package that will convert between numbers and letters based on the telephone keypad. Since this package is on CRAN, you can install the package to your computer using the install.packages function: install.packages(&quot;phonenumber&quot;) This downloads the package from CRAN and saves it in a special location on your computer where R can load it when you’re ready to use it. 1.2.3 Loading an installed package Once you have installed a package, it will be saved to your computer, but you won’t be able to access it’s functions until you load it in your R session. You can load a package in an R session using the library() function, with the package name inside the parentheses. library(phonenumber) [Add note about quotation marks with library call.] Once a package is loaded, you can use all its exported (i.e., public) functions by calling them directly. For example, the phonenumber has a function called letterToNumber that converts a character string to a number. Once you’ve loaded phonenumber using library, you can use this function in your R session: fedex_number &lt;- &quot;GoFedEx&quot; letterToNumber(fedex_number) ## [1] &quot;4633339&quot; [Add note about character strings] 1.3 Basic code conventions of R 1.3.1 R’s MVP: The gets arrow The gets arrow, &lt;-, is R’s assignment operator. It takes whatever you’ve created on the right hand side of the &lt;- and saves it as an object with the name you put on the left hand side of the &lt;-. The basic structure of a call with a gets arrow looks like this: ## Note: Generic code [name of object] &lt;- [thing I want to save] [Add a note on generic code] [Add a note on -&gt;, the history of the gets arrow, and the keyboard shortcut for the gets arrow.] For example, if I just type &quot;GoFedEx&quot; at the R prompt, R will print that string back to me, but won’t save it anywhere for me to use later: &quot;GoFedEx&quot; ## [1] &quot;GoFedEx&quot; However, if I assign &quot;GoFedEx&quot; to an object using a gets arrow, I can print it out or use it later by typing (“referencing”) that object name: fedex_number &lt;- &quot;GoFedEx&quot; fedex_number ## [1] &quot;GoFedEx&quot; letterToNumber(fedex_number) ## [1] &quot;4633339&quot; 1.3.2 Assignment operator wars: &lt;- vs. = You can make assignments in R using either the gets arrow (&lt;-) or =. When you read other people’s code, you’ll see both. R gurus advise using &lt;- rather than = when coding in R, and as you move to doing more complex things, some subtle problems might crop up if you use =. I have heard from someone in the know that you can tell the age of a programmer by whether he or she uses the gets arrow or =, with = more common among the young and hip. For this course, however, I am asking you to code according to Hadley Wickham’s R style guide, which specifies using the gets arrow for assignment. While you will be coding with the gets arrow exclusively in this course, it will be helpful for you to know that the two assignment arrows do pretty much the same thing: one_to_ten &lt;- 1:10 one_to_ten ## [1] 1 2 3 4 5 6 7 8 9 10 one_to_ten = 1:10 one_to_ten ## [1] 1 2 3 4 5 6 7 8 9 10 1.3.3 Naming objects When you assign objects, you will need to choose names for them. This object name is what you will type later in your code to reference the object and use it in functions, figures, etc. For example, with the following code, I am assigning the character string “GoFedEx” to an object that I am naming fedex_number: fedex_number &lt;- &quot;GoFedEx&quot; There are only two fixed rules for naming objects in R: Use only letters, numbers, and underscores Don’t start with anything but a letter In addition to these fixed rules, there are also some guidelines for naming objects that you should adopt now, since they will make your life easier as you advance to writing more complex code in R. The following three guidelines for naming objects are from Hadley Wickham’s R style guide: Use lower case for variable names (fedex_number, not FedExNumber) Use an underscore as a separator (fedex_number, not fedex.number or fedexNumber) Avoid using names that are already defined in R (e.g., don’t name an object mean, because as mean function exists) Another good practice is to name objects after nouns (e.g., fedex_number) and later, when you start writing functions, name those after verbs (e.g., call_fedex). You’ll want your object names to be short enough that they don’t take forever to type as you’re coding, but not so short that you can’t remember what they stand for. [Make this a note?] Sometimes, you’ll want to create an object that you won’t want to keep for very long. For example, you might want to create a small object to test some code, but you plan to not need the object again once you’ve done that. You may want to come up with some short, generic object names that you use for these kinds of objects, so that you’ll know that you can delete them without problems when you want to clean up your R session. [Note about these object names in different languages] 1.3.4 Commenting code [Add section about commenting code here] 1.4 R’s most basic object types An R object stores some type of data that you want to use later in your R code, without fully recreating it. The content of R objects can vary from very simple (the &quot;GoFedEx&quot; string in the example code above) to very complex objects with lots of elements (for example, a machine learning model). There are a variety of different object types in R, shaped to fit different types of objects ranging from the simple to complex. In this section, we’ll start by describing two object types that you will use most often in basic data analysis, vectors (1-dimensional objects) and dataframes (2-dimensional objects). 1.4.1 Vectors To get an initial grasp of the vector object type in R, think of it as a 1-dimensional object, or a string of values. All values in a vector must be of the same class (i.e., all numbers, all characters, all dates). If you try to create a vector with elements from different classes (like “FedEx”, which is a character, and 3, a number), R will coerce all of the elements to the most generic class of any of the elements (i.e., “FedEx” and “3” will both become characters, since “3” can be changed to a character, but “FedEx” can’t be changed to a number). To create a vector from different elements, you’ll use the concatenation function, c to join them together, with commas between the elements. For example, to create a vector with the first five elements of the Fibonacci sequence, you can run: fibonacci &lt;- c(1, 1, 2, 3, 5) fibonacci ## [1] 1 1 2 3 5 Here is an example of creating a vector using elements with the character class instead of numbers (note the quotation marks used around each element for character strings): one_to_five &lt;- c(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;) one_to_five ## [1] &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; &quot;five&quot; If you mix classes when you create the vector, R will coerce all the elements to most generic of the elements’ classes: mixed_classes &lt;- c(1, 3, &quot;five&quot;) mixed_classes ## [1] &quot;1&quot; &quot;3&quot; &quot;five&quot; A vector’s length is the number of elements in the vector. You can use the length function to determine a vector’s length: length(mixed_classes) ## [1] 3 Once you create an object, you will often want to reference the whole object in future code. However, there will be some times when you’ll want to reference just certain elements of the object (for example, the first three values). You can pull out certain values from a vector by using indexing with square brackets ([...]) to identify the locations of the elements you want to pull, with a numeric vector inside the brackets that lists the numbered positions of the elements you want to get: fibonacci[2] # Get the second value ## [1] 1 fibonacci[c(1, 5)] # Get first and fifth values ## [1] 1 5 fibonacci[1:3] # Get the first three values ## [1] 1 1 2 You can also use logic to pull out some values of a vector. For example, you might only want to pull out even values from the fibonacci vector. We’ll cover using logical statements to index vectors later in the book. 1.4.2 Dataframes A dataframe is a 2-dimensional object, and is made of one or more vectors of the same length stuck together side-by-side. It is the closest R has to an Excel spreadsheet-type structure. You can create dataframes using the data.frame() function. However, most often you will create a dataframe by reading in data from a file, using something like read.csv(). To create a dataframe using data.frame, in this case by sticking together vectors you already have saved as R objects, you can run: fibonacci_seq &lt;- data.frame(num_in_seq = one_to_five, fibonacci_num = fibonacci) fibonacci_seq ## num_in_seq fibonacci_num ## 1 one 1 ## 2 two 1 ## 3 three 2 ## 4 four 3 ## 5 five 5 Note that this call requires that the one_to_five and fibonacci vectors are the same length, although they don’t have to be (and in this case aren’t) the same class of objects (one_to_five is a character class, fibonacci is numeric). You can also create a dataframe using data.frame even if you don’t have the vectors for the columns saved as objects. Instead, in this case, you can put the vector assignment directly within the data.frame call: fibonacci_seq &lt;- data.frame(num_in_seq = c(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;), fibonacci_num = c(1, 1, 2, 3, 5)) fibonacci_seq ## num_in_seq fibonacci_num ## 1 one 1 ## 2 two 1 ## 3 three 2 ## 4 four 3 ## 5 five 5 [A note about how R will evaluate calls from the inside out when you write a call like this with different functions included.] The general format for using data.frame() is: ## Note: Generic code [name of object] &lt;- data.frame([1st column name] = [1st column content], [2nd column name] = [2nd column content]) with an equals sign between the column name and column content for each column, and commas between each of the columns. You can use square-bracket indexing ([..., ...]) for dataframes, too, but now they’ll have two dimensions (rows, then columns). Put the rows you want before the comma, the columns after. If you want all of something (e.g., all rows in the dataframe), leave the designated spot blank. Here are two examples of using square-bracket indexing to pull a subset of the fibonacci_seq dataframe we created above: fibonacci_seq[1:2, 2] # First two rows, second column ## [1] 1 1 fibonacci_seq[5, ] # Last row, all columns ## num_in_seq fibonacci_num ## 5 five 5 So far, we’ve only shown how to create dataframes from scratch within an R session. Usually, however, you’ll create R dataframes instead by reading in data from an outside file using read.csv and related functions. For example, you might want to analyze data on all the guests that came on the Daily Show, circa Jon Stewart. If you have this data in a comma-separated (csv) file on your computer called daily_show_guests.csv, you can read it into your R session with the following code: daily_show &lt;- read.csv(&quot;daily_show_guests.csv&quot;, header = TRUE, skip = 4) In this code, the read.csv function is reading in the data from “daily_show_guests”, while the gets arrow (&lt;-) assigns that data to the object daily_show, which you can then reference in later code to explore and plot the data. Once you’ve read in the data and saved the resulting dataframe as an object, you can use square-bracket indexing to look at the first two rows in the data: daily_show[1:2, ] ## YEAR GoogleKnowlege_Occupation Show Group Raw_Guest_List ## 1 1999 actor 1/11/99 Acting Michael J. Fox ## 2 1999 Comedian 1/12/99 Comedy Sandra Bernhard You can use the functions dim(), nrow(), and ncol to figure out the dimensions (number of rows and columns) of a dataframe: dim(daily_show) ## [1] 2693 5 nrow(daily_show) ## [1] 2693 ncol(daily_show) ## [1] 5 1.5 Using R functions 1.5.1 Function structure In general, functions in R take the following structure: ## Generic code function.name(parameter 1 = argument 1, parameter 2 = argument 2, parameter 3 = argument 3) The result of the function will be output to your R session, unless you choose to save the output in an object: ## Generic code new_object &lt;- function.name(parameter 1 = argument 1, parameter 2 = argument 2, parameter 3 = argument 3) Here are some example function calls, to give you examples of this structure: head(daily_show) ## YEAR GoogleKnowlege_Occupation Show Group Raw_Guest_List ## 1 1999 actor 1/11/99 Acting Michael J. Fox ## 2 1999 Comedian 1/12/99 Comedy Sandra Bernhard ## 3 1999 television actress 1/13/99 Acting Tracey Ullman ## 4 1999 film actress 1/14/99 Acting Gillian Anderson ## 5 1999 actor 1/18/99 Acting David Alan Grier ## 6 1999 actor 1/19/99 Acting William Baldwin head(daily_show, n = 3) ## YEAR GoogleKnowlege_Occupation Show Group Raw_Guest_List ## 1 1999 actor 1/11/99 Acting Michael J. Fox ## 2 1999 Comedian 1/12/99 Comedy Sandra Bernhard ## 3 1999 television actress 1/13/99 Acting Tracey Ullman daily_show &lt;- read.csv(&quot;daily_show_guests.csv&quot;, skip = 4, header = TRUE) Within the function call, parameters allow you to customize the function to run in a certain way (e.g., use a certain dataframe as an input, give output in a certain format). Some function parameters will have default arguments, which means that you don’t have to put a value for that parameter for the function to run, but you can if you want the function to do something other than the default. 1.5.2 Function help files You can find out more about a function, include what parameters it has and what the default values, if any, are by using ? before the function name in the R console. For example, to find out more about the read.csv command, run: ?read.csv From the “Usage” section of the help file, you can figure out that the only required parameter is file, the pathname of the file that you want to read in, since this is the only argument in the “Usage” example without an argument value: read.csv(file, header = TRUE, sep = &quot;,&quot;, quote = &quot;\\&quot;&quot;, dec = &quot;.&quot;, fill = TRUE, comment.char = &quot;&quot;, ...) You can also see from this “Usage” section that the default value of header is TRUE, the default value of sep is a comma, etc. The “Arguments” section explains each of the parameters, and possible arguments that each can take. For example, here is the explanation of the nrows parameter in the read.csv function: integer: the maximum number of rows to read in. Negative and other invalid values are ignored. From this, you can determine that you should put in a whole number, 1 or higher, and the function will only read in that many lines of the dataframe when you run read.csv. 1.5.3 Function parameters Each function parameter has a name (e.g., nrows, header, file). The safest way to call a function in R is to use the structure parameter name = argument value for every parameter, like this: head(x = daily_show, n = 3) However, you can also give argument values by position. For example, in the head function, the first parameter is x, the object you want to look at, and the second is n, the number of elements you want to include when you look at the object. If you know this, you can call head using the shorter call: head(daily_show, 3) If you use position alone, you will have problems if you don’t include arguments in exactly the right order. However, if you use parameter names to set each argument, it doesn’t matter what order you include arguments when calling a function: # These two calls return the exact same object head(x = daily_show, n = 3) head(n = 3, x = daily_show) Because code tends to be more robust to errors when you use parameter names to set arguments, we recommend against using position, rather than name, to give arguments when calling functions, at least while you’re learning R. It’s too easy to forget the exact order and get errors in your code. However, there is one exception– the first argument to a function is almost always required (i.e., there’s not a default value), and you very quickly learn what the first parameter of most functions are as soon as you start using the function regularly. Therefore, it’s fine to use position alone to specify the first argument in a function, but for now always use the parameter name to set any later arguments: head(daily_show, n = 3) [Add a note about tab completion] 1.6 In-course Exercise 1.6.1 About the dataset For today’s class, you’ll be using a dataset of all the guests on Jon Stewart’s The Daily Show. This data was originally collected by Nate Silver’s website, FiveThirtyEight and is available on FiveThirtyEight’s GitHub page under the Creative Commons Attribution 4.0 International License. The only change made to the original file was to add (commented) attribution information at the start of the file. First, check out a bit more about this data and its source: Check out the Creative Commons license. What are we allowed to do with this data? What restrictions are there on using the data? It’s often helpful to use prior knowledge to help check out or validate your dataset. One thing we might want to know about this data is if it covers the whole time that Jon Stewart hosted The Daily Show. Find out the dates he started and finished as host. Briefly browse around FiveThirtyEight’s GitHub data page. What are some other datasets available that you find interesting? You can scroll to the bottom of the page to get to the compiled README.md content, which gives the full titles and links to relevant datasets. You can also click on any dataset to get more information. Look at the GitHub page for this Daily Show data. How many columns will be in this dataset? What kind of information does the data include? [Add a note about GitHub] If you have extra time: Check out the related article on FiveThirtyEight. What are some specific questions they used this data to answer for this article? Who is Nate Silver? 1.6.2 Getting the data onto your computer First, download the data from GitHub onto your computer. Make a directory (folder) on your computer specifically for this course (I strongly recommend that you put it somewhere where the file path will not have any spaces in it– for example, putting it in your home directory, under the name “R_Prog_Course” would be great. Putting it in a directory called “R Prog Course” would not.). Put the Daily Show data in your directory for this course. Take the following steps to get the data onto your computer If you do not yet have a directory (folder) just for this course, make one someplace straightforward like in your home directory. Do not use any spaces in the directory name. Download the file from GitHub. Right click on Raw and then choose “Download linked file”. Put the file into the directory you created for this course. Find out what your home directory is in R. To do this, make sure R is set to your home directory using setwd(&quot;~&quot;), and then get R to print that home directory path using getwd(). Outside of R, open Finder (or your system’s equivalent). Go to your home directory (mine, for example, is /Users/brookeanderson). Figure out how to get from your home directory to the directory you created for this course. For example, from my home directory, I would go RProgrammingForResearch to data. Go back into R. Set R’s working directory to your directory for this class using the setwd() command, now that you know the pathname for the directory. For example, I would use setwd(&quot;~/RProgrammingForResearch/data&quot;). Use the list.files() command to make sure that the daily_show_guests.csv file is in your current working directory. The full R code for this task might look something like: setwd(&quot;~&quot;) getwd() setwd(&quot;~/RProgrammingForResearch/data&quot;) getwd() list.files() &quot;daily_show_guests.csv&quot; %in% list.files() If you have extra time: See if you can figure out the last line of code in the example R code. 1.6.3 Getting the data into R Now that you have the dataset in your working directory, you can read it into R. This dataset is in a .csv (comma separated values) format. (We will talk more about different file formats next week.) You can read csv files into R using the read.csv() function. Read the data into your R session Use the read.csv() function to read the data into R and save it as the object daily_show. Use the help file for the read.csv() function to figure out how this function works. To pull that up, use ?read.csv. Why are we using the option header = TRUE? Can you figure out why we’re using the skip option, and why it’s set to 4? Note that you need to put the file name in quotation marks. What would have happened if you’d used read.csv but hadn’t saved the result as the object daily_show? (For example, you’d run the code read.csv(&quot;daily_show_guests.csv&quot;) rather than daily_show &lt;- read.csv(&quot;daily_show_guests.csv&quot;).) Example R code: daily_show &lt;- read.csv(&quot;daily_show_guests.csv&quot;, header = TRUE, skip = 4) If you have extra time: Say this was a really big dataset. You want to check out just the first 10 rows to make sure that you’ve got your code right before you take the time to pull in the whole dataset. Use the help file for read.csv() to figure out how to only read in a few rows. Look through the help file for other options available for read.csv(). Can you think of examples when some of these options would be useful? Example R code: daily_show_first10 &lt;- read.csv(&quot;daily_show_guests.csv&quot;, header = TRUE, skip = 4, nrows = 10) daily_show_first10 1.6.4 Checking out the data You now have the data available in the daily_show option. You’ll want to check it out to make sure it read in correctly, and also to get a feel for the data. Throughout, you can use the help pages to figure out more about any of the functions being used (for example, ?dim). Take the following steps to check out the dataset Use indexing to look at the first two rows of the dataset. Based on this, what does each row “measure”? What information do you get for each “measurement”? As a reminder, indexing uses square brackets immediately after the object name. If the object has two dimensions, like a dataframe (rows and columns), you put the rows you want, then a comma, then the columns you want. If you want all rows (or columns), you leave that space blank. For example, if you wanted to get the first two rows and the first three columns, you’d use daily_show[1:2, 1:3]. If you wanted to get the first five rows and all the columns, you’d use daily_show[1:5, ]. Use the dim() function to find out how many rows and columns this dataframe has. Based on what you found out about the data from the GitHub page, does it have the number of columns you expected? Based on what you know about the data (all the guests who came on The Daily Show with Jon Stewart), do you think it has about the right number of rows? Use the head() function to look at the first few rows of the dataframe. Does it look like the rows go in order by date? What was the date of Jon Stewart’s first show? Does it look like this dataset covers that first show? Use the tail() function to look at the last few rows of the dataframe. What is the last show date covered by the dataframe? Who was the last guest? Example R code: daily_show[1:2, ] dim(daily_show) head(daily_show) tail(daily_show) If you have extra time: Say you wanted to look at the first ten rows of the dataframe, rather than the first six. How could you use an option with head() to do this? Example R code: head(daily_show, n = 10) 1.6.5 Using the data to answer questions Nate Silver was a guest on The Daily Show. Let’s use this data to figure out how many times he was a guest and when he was on the show. Find out more about Nate Silver on The Daily Show Use the subset() function to create a new dataframe that only has the rows of daily_show when Nate Silve was a guest. Put it in the object nate_silver. Print out the full nate_silver dataframe by typing nate_silver. (You could just use this to answer both questions, but still try the next steps. They would be important with a bigger dataset.) To count the number of times Nate Silver was a guest, you’ll need to count the number of rows in the new dataset. You can either use the dim() function or the nrow() function to do this. What additional information does the dim() function give you? To get the dates when Nate Silver was a guest, you can print out just the Show column of the dataframe. There are a few ways you can do this using indexing: nate_silver[ , 3] (since Show is the third column), nate_silver[ , &quot;Show&quot;], or nate_silver$Show. Try these. Example R code: nate_silver &lt;- subset(daily_show, Raw_Guest_List == &quot;Nate Silver&quot;) nate_silver dim(nate_silver) nrow(nate_silver) nate_silver[ , 3] nate_silver[ , &quot;Show&quot;] If you have extra time: When you print out the Show column, why does it also print out something underneath about Levels? Hint: This has to do with the class that R has saved this column as. What class is it currently? What other classes might we want to consider converting it to as we continue working with the dataset? Check out the example code below to get some ideas. Was Nate Silver the only statistician to be a guest on the show? What were the occupations that were only represented by one guest visit? Since GoogleKnowlege_Occupation is a factor, you can use the table() function to create a new vector with the number of times each value of GoogleKnowlege_Occupation shows up. You can put this information into a new vector and then pull out only the values that equal 1 (so, only had one guest). (Note that “Statistician” doesn’t show up– there was only one person who was a guest, but he had three visits.) Pick your favorite “one-off” example and find out who the guest was for that occupation. Example R code: class(nate_silver$Show) range(nate_silver$Show) nate_silver$Show &lt;- as.Date(nate_silver$Show, format = &quot;%m/%d/%y&quot;) range(nate_silver$Show) diff(range(nate_silver$Show)) # Time between Nate&#39;s first and last shows statisticians &lt;- subset(daily_show, GoogleKnowlege_Occupation == &quot;Statistician&quot;) statisticians num_visits &lt;- table(daily_show[ , 2]) head(num_visits) # Note: This is a vector rather than a dataframe names(num_visits[num_visits == 1]) subset(daily_show, GoogleKnowlege_Occupation == &quot;chess player&quot;) subset(daily_show, GoogleKnowlege_Occupation == &quot;mathematician&quot;) subset(daily_show, GoogleKnowlege_Occupation == &quot;orca trainer&quot;) subset(daily_show, GoogleKnowlege_Occupation == &quot;Puzzle Creator&quot;) subset(daily_show, GoogleKnowlege_Occupation == &quot;Scholar&quot;) "],
["entering-and-cleaning-data-1.html", "Chapter 2 Entering and cleaning data 1 2.1 R scripts 2.2 Getting data into R 2.3 Reading data into R 2.4 Saving data as R objects 2.5 Cleaning up data in R", " Chapter 2 Entering and cleaning data 1 Download a pdf of the lecture slides covering this topic. 2.1 R scripts If you are writing code you think you will use later, write it in an R script file rather than using the console. Open a new script file in RStudio: File -&gt; New File -&gt; R Script. To run code from an R script file in RStudio, you can use the Run button (or Command-R). It will run whatever’s on your cursor line or whatever’s highlighted. To run the whole script, use source. Save scripts using the extension .R 2.2 Getting data into R 2.2.1 Basics of getting data into R Basic approach: Download data to your computer Make sure R is working in the directory with your data (getwd, setwd) Read data into R (read.csv, read.table) Check to make sure the data came in correctly (dim, head, tail, str) 2.2.2 Directories Anytime you work in R, R will run from within a directory somewhere on your computer. Let’s review directories: You can check your working directory anytime using getwd(): getwd() ## [1] &quot;/Users/brookeanderson/RProgrammingForResearch&quot; You can use setwd() to change your directory. To get to your home directory (for example, mine is “/Users/brookeanderson”), you can use the abbreviation ~. For example, if you want to change into your home directory and print its name, you could run: setwd(&quot;~&quot;) getwd() ## [1] &quot;/Users/brookeanderson&quot; The most straightforward way to read in data is often to put it in your working directory and then read it in using the file name. If you’re working in the directory with the file you want, you should see the file if you list files in the working directory: list.files() ## [1] &quot;_book&quot; &quot;_bookdown.yml&quot; ## [3] &quot;_build.sh&quot; &quot;_deploy.sh&quot; ## [5] &quot;_output.yml&quot; &quot;01-course_info.Rmd&quot; ## [7] &quot;02-prelim.Rmd&quot; &quot;03-databasics.Rmd&quot; ## [9] &quot;book.bib&quot; &quot;data&quot; ## [11] &quot;DESCRIPTION&quot; &quot;figures&quot; ## [13] &quot;homework.Rmd&quot; &quot;index.Rmd&quot; ## [15] &quot;LICENSE&quot; &quot;packages.bib&quot; ## [17] &quot;preamble.tex&quot; &quot;README.md&quot; ## [19] &quot;references.Rmd&quot; &quot;RProgrammingForResearch.Rmd&quot; ## [21] &quot;RProgrammingForResearch.Rproj&quot; &quot;slides&quot; ## [23] &quot;style.css&quot; &quot;toc.css&quot; ## [25] &quot;vocabulary.Rmd&quot; 2.2.3 Getting around directories There are a few abbreviations you can use to represent certain relative or absolute locations when you’re using setwd(): Command Directory setwd(&quot;~&quot;) Your home directory setwd(&quot;..&quot;) One directory up from your current directory setwd(&quot;../..&quot;) Two directories up from your current directory 2.2.4 Taking advantage of paste0 You can create an object with your directory name using paste0, and then use that to set your directory. We’ll take a lot of advantage of this for reading in files. The convention for paste0 is: [object name] &lt;- paste0(&quot;[first thing you want to paste]&quot;, &quot;[what you want to add to that]&quot;, &quot;[more you want to add]&quot;) Here’s an example: my_dir &lt;- paste0(&quot;~/Desktop/RCourseFall2015/&quot;, &quot;Week2_Aug31&quot;) my_dir ## [1] &quot;~/Desktop/RCourseFall2015/Week2_Aug31&quot; setwd(my_dir) 2.2.5 Pathnames: Relative versus absolute When you want to reference a directory or file, you can use one of two types of pathnames: Relative: How to get there from your current working directory Absolute: The full pathname Say your current working directory was /Users/brookeanderson/Desktop/RCourseFall2015 and you wanted to get into the subdirectory Week2_Aug31. Here are examples using the two types of pathnames: Absolute: setwd(&quot;/Users/brookeanderson/Desktop/RCourseFall2015/Week2_Aug31&quot;) Relative: setwd(&quot;Week2_Aug31&quot;) Here are some other examples of relative pathnames: If Week2_Aug31 is a subdirectory of your current parent directory: setwd(&quot;../Week2_Aug31&quot;) If Week2_Aug31 is a subdirectory of your home (root) directory: setwd(&quot;~/Week2_Aug31&quot;) If Week2_Aug31 is a subdirectory of the subdirectory Ex of your current working directory: setwd(&quot;Ex/Week2_Aug31&quot;) 2.3 Reading data into R 2.3.1 What kind of data can you get into R? The sky is the limit… Flat files Files from other statistical packages (SAS, Excel, Stata, SPSS) Tables on webpages (e.g., the table near the end of this page) Data in a database (e.g., SQL) Really crazy data formats used in other disciplines (e.g., netCDF files from climate folks, MRI data stored in Analyze, NIfTI, and DICOM formats) Data through APIs (e.g., GoogleMaps, Twitter) Incrediably messy data using scan and readLines 2.3.2 Types of flat files R can read in data from a lot of different formats. The only catch: you need to tell R how to do it. To start, we’ll look at flat files: Fixed width files Delimited files “.csv”: Comma-separated values “.tab”, “.tsv”: Tab-separated values Other possible delimiters: colon, semicolon, pipe (“|”) 2.3.3 Reading in flat files R can read any of these types of files using one of the read.table and read.fwf functions. Find out more about those functions with: ?read.table ?read.fwf 2.3.4 read.table family of functions Some of the interesting options with the read.table family of functions are: Option Description sep What is the delimiter in the data? skip How many lines of the start of the file should you skip? header Does the first line you read give column names? as.is Should you bring in strings as characters, not factors? nrows How many rows do you want to read in? na.strings How are missing values coded? All members of the read.table family are doing the same basic thing. The only difference is what defaults they have for the separator (sep) and the decimal point (dec). Members of the read.table family: Function Separator Decimal point read.csv comma period read.csv2 semi-colon comma read.delim tab period read.delim2 tab comma 2.3.5 Reading in online flat files If you’re reading in data from a non-secure webpage (i.e., one that starts with http), if the data is in a “flat-file” format, you can just read it in using the web address as the file name: url &lt;- paste0(&quot;http://www2.unil.ch/comparativegenometrics&quot;, &quot;/docs/NC_006368.txt&quot;) ld_genetics &lt;- read.delim(url, header = TRUE) ld_genetics[1:5, 1:4] ## pos nA nC nG ## 1 500 307 153 192 ## 2 1500 310 169 207 ## 3 2500 319 167 177 ## 4 3500 373 164 168 ## 5 4500 330 175 224 If you want to read in data from a secure webpage (e.g., one that starts with https), then you’ll need to do something different. First, you’ll need to install then load the package repmis: # install.packages(&quot;repmis&quot;) library(repmis) Now you can use the source.data function to read in data from places like GitHub and Dropbox public folders: url &lt;- paste0(&quot;https://raw.githubusercontent.com/cmrivers/&quot;, &quot;ebola/master/country_timeseries.csv&quot;) ebola &lt;- source_data(url) ## Downloading data from: https://raw.githubusercontent.com/cmrivers/ebola/master/country_timeseries.csv ## SHA-1 hash of the downloaded data file is: ## 6da83b3d2017245217d35989960184234a6c4e7f ebola[1, 1:3] ## Date Day Cases_Guinea ## 1 1/5/2015 289 2776 2.4 Saving data as R objects 2.4.1 Saving R objects You can save an R object you’ve created as an .RData file using save(): save(ebola, file = &quot;Ebola.RData&quot;) list.files() ## [1] &quot;_book&quot; &quot;_bookdown.yml&quot; ## [3] &quot;_build.sh&quot; &quot;_deploy.sh&quot; ## [5] &quot;_output.yml&quot; &quot;01-course_info.Rmd&quot; ## [7] &quot;02-prelim.Rmd&quot; &quot;03-databasics.Rmd&quot; ## [9] &quot;book.bib&quot; &quot;data&quot; ## [11] &quot;DESCRIPTION&quot; &quot;Ebola.RData&quot; ## [13] &quot;figures&quot; &quot;homework.Rmd&quot; ## [15] &quot;index.Rmd&quot; &quot;LICENSE&quot; ## [17] &quot;packages.bib&quot; &quot;preamble.tex&quot; ## [19] &quot;README.md&quot; &quot;references.Rmd&quot; ## [21] &quot;RProgrammingForResearch.Rmd&quot; &quot;RProgrammingForResearch.Rproj&quot; ## [23] &quot;slides&quot; &quot;style.css&quot; ## [25] &quot;toc.css&quot; &quot;vocabulary.Rmd&quot; This saves to your current working directory (unless you specify a different location). 2.4.2 Loading R objects Then you can re-load the object later using load(): rm(ebola) ls() ## [1] &quot;ld_genetics&quot; &quot;my_dir&quot; &quot;url&quot; load(&quot;Ebola.RData&quot;) ls() ## [1] &quot;ebola&quot; &quot;ld_genetics&quot; &quot;my_dir&quot; &quot;url&quot; 2.4.3 Saving R objects One caveat for saving R objects: some people suggest you avoid this if possible, to make your research more reproducible. Imagine someone wants to look at your data and code in 30 years. R might not work the same, so you might not be able to read an .RData file. However, you can open flat files (e.g., .csv, .txt) and R scripts (.R) in text editors– you should still be able to do this regardless of what happens to R. Potential exceptions: You have an object that you need to save that has a structure that won’t work well in a flat file Your starting dataset is really, really large, and it would take a long time for you to read in your data fresh every time 2.5 Cleaning up data in R 2.5.1 Renaming columns Often, you’ll want to change the column names of a dataframe as soon as you bring in the data, especially if the original ones have things like spaces. We’ll look at this in the icd10 data. library(readxl) ## DEFINEDNAME: 20 00 00 01 0b 00 00 00 01 00 00 00 00 00 00 06 3b 00 00 00 00 51 2b 00 00 0a 00 ## DEFINEDNAME: 20 00 00 01 0b 00 00 00 01 00 00 00 00 00 00 06 3b 00 00 00 00 51 2b 00 00 0a 00 ## DEFINEDNAME: 20 00 00 01 0b 00 00 00 01 00 00 00 00 00 00 06 3b 00 00 00 00 51 2b 00 00 0a 00 ## DEFINEDNAME: 20 00 00 01 0b 00 00 00 01 00 00 00 00 00 00 06 3b 00 00 00 00 51 2b 00 00 0a 00 icd10 &lt;- read_excel(&quot;icd-10.xls&quot;) Take a look at the icd10 data we loaded in the exercise: icd10[1:4, ] ## Code ICD Title ## 1 A00-B99 I. Certain infectious and parasitic diseases ## 2 A00-A09 Intestinal infectious diseases ## 3 A00 Cholera ## 4 A00.0 Cholera due to Vibrio cholerae 01, biovar cholerae You can use the colnames() function to find out what the current column names are: colnames(icd10) ## [1] &quot;Code&quot; &quot;ICD Title&quot; You can also rename column names using colnames(). You just put this call on the left of the assignment, and what you want to assign them on the left. The new names will need to be in a vector the same length as the number of columns. colnames(icd10) &lt;- c(&quot;code&quot;, &quot;title&quot;) icd10[1:2, ] ## code title ## 1 A00-B99 I. Certain infectious and parasitic diseases ## 2 A00-A09 Intestinal infectious diseases 2.5.2 Using subset() You will often want to use only a portion of your data. You can use subset() to create a subset, using logical operators. For example, if you wanted to just pull out the rows of the icd10 dataframe that start with the letter “A”, you could run: icd10_a &lt;- subset(icd10, substr(code, 1, 1) == &quot;A&quot;) Here are the ends of the original and the subsetted dataframes: tail(icd10, 2) ## code title ## 11089 Y89.9 Sequelae of unspecified external cause ## 11090 &lt;NA&gt; &lt;NA&gt; tail(icd10_a, 2) ## code title ## 458 A98.8 Other specified viral hemorrhagic fevers ## 459 A99 Unspecified viral hemorrhagic fever The convention for subset() is: subset([name of dataframe], [logical statement describing which rows to keep], select = [vector with the names of columns to keep]) 2.5.3 Common logical operators in R Operator Meaning Example == equals subset(df, city == &quot;Los Angeles&quot;) != does not equal subset(df, city != &quot;Los Angeles&quot;) %in% is in subset(df, city %in% c(&quot;Los Angeles&quot;, &quot;San Diego&quot;)) is.na() is NA subset(df, is.na(cases)) !is.na() is not NA subset(df, !is.na(cases)) &amp; and subset(df, city == &quot;Los Angeles&quot; &amp; !is.na(cases)) | or subset(df, city == &quot;Los Angeles&quot; | !is.na(cases)) 2.5.4 Adding columns In R, you can use the $ operator after a dataframe to pull out one of it’s columns. For example: ca_measles &lt;- read.delim(&quot;measles_data/02-09-2015.txt&quot;, header = FALSE, col.names = c(&quot;city&quot;, &quot;count&quot;)) head(ca_measles$count) ## [1] 6 20 2 4 2 34 You can take advantage of this to add new columns to an existing dataframe. For example, this data is from Feb. 9, 2015. We can add a column with the date to ca_measles: ca_measles$date &lt;- rep(&quot;02-09-2015&quot;, length = nrow(ca_measles)) head(ca_measles, 3) ## city count date ## 1 ALAMEDA 6 02-09-2015 ## 2 LOS ANGELES 20 02-09-2015 ## 3 City of Long Beach 2 02-09-2015 Two notes: The previous example uses the rep() function, which will repeat a value length number of times If the value you assign to the new column is not the right length (remember, all columns in a dataframe must be vectors of equal length), R will try to “recycle” it to fill up the dataframe. So, the following call would have been a simpler alternative: ca_measles$date &lt;- &quot;02-09-2015&quot; ca_measles[1:2, ] ## city count date ## 1 ALAMEDA 6 02-09-2015 ## 2 LOS ANGELES 20 02-09-2015 2.5.5 Date class One final common task in cleaning data is to change the class of some of the columns. This is especially common for dates, which will usually be read in as characters or factors. 2.5.6 Vector classes Here are a few common vector classes in R: Class Example character “Chemistry”, “Physics”, “Mathematics” numeric 10, 20, 30, 40 factor Male [underlying number: 1], Female [2] Date “2010-01-01” [underlying number: 14,610] logical TRUE, FALSE To find out the class of a vector, you can use class(): class(ca_measles$date) ## [1] &quot;character&quot; To find out the classes of all columns in a dataframe, you can use str(): str(ca_measles) ## &#39;data.frame&#39;: 13 obs. of 3 variables: ## $ city : Factor w/ 13 levels &quot;ALAMEDA&quot;,&quot;City of Long Beach&quot;,..: 1 4 2 3 5 6 7 8 9 10 ... ## $ count: int 6 20 2 4 2 34 5 6 13 3 ... ## $ date : chr &quot;02-09-2015&quot; &quot;02-09-2015&quot; &quot;02-09-2015&quot; &quot;02-09-2015&quot; ... 2.5.7 Converting to Date class To convert a vector to the Date class, you can use as.Date(): ca_measles$date &lt;- as.Date(ca_measles$date, format = &quot;%m-%d-%Y&quot;) head(ca_measles$date, 3) ## [1] &quot;2015-02-09&quot; &quot;2015-02-09&quot; &quot;2015-02-09&quot; class(ca_measles$date) ## [1] &quot;Date&quot; Once you have an object in the Date class, you can do things like plot by date, calculate the range of dates, and calculate the total number of days the dataset covers: range(ca_measles$date) ## [1] &quot;2015-02-09&quot; &quot;2015-02-09&quot; diff(range(ca_measles$date)) ## Time difference of 0 days The only tricky thing is learning the abbreviations for the format option. Here are some common ones: Abbreviation Meaning %m Month as a number (e.g., 1, 05) %B Full month name (e.g., August) %b Abbreviated month name (e.g., Aug) %y Two-digit year (e.g., 99) %Y Four-digit year (e.g., 1999) Here are some examples: Your date format = 10/23/2008 “%m/%d%Y” 08-10-23 “%y-%m-%d” Oct. 23 2008 “%b. %d %Y” October 23, 2008 “%B %d, %Y” "],
["appendix-a-vocabulary.html", "A Appendix A: Vocabulary A.1 Week 1 A.2 Week 2 A.3 Week 3 A.4 Week 4 A.5 Week 5 A.6 Week 6 A.7 Week 7 A.8 Week 8", " A Appendix A: Vocabulary You will be responsible for knowing the following functions and vocabulary for the weekly quizzes. A.1 Week 1 c() data.frame() dim() ncol() nrow() head(), option n = read.csv, options head =, skip =, nrow = [...], [..., ...] getwd() setwd(), including setwd(&quot;~&quot;) list.files() install.packages() library() &lt;- = subset() length() open source software “free as in beer” “free as in speech” CRAN GitHub R packages R working directory How to download a csv file from GitHub Nate Silver FiveThirtyEight Grading policies for the course Course requirements / policies for in-class quizzes and weekly journal entries Style rules for naming R objects Difference between R and RStudio Vectors Dataframes Note: Pay attention in the course notes and exercise to where the code uses quotation marks and where it does not– this will help you in the quiz A.2 Week 2 source() setwd(), including setwd(&quot;~&quot;), setwd(&quot;..&quot;), setwd(&quot;..\\..&quot;) list.files(), option path = functions in the read.table() family, including read.csv() and read.delim(). What are defaults of the sep = and dec = options for each? For all, the options header =, sep =, as.is =, na.strings =, nrows =, skip =, and col.names =. paste(), option sep = paste0() readxl package and its read_excel() function haven package and its read_sas() function colnames(), and how to use it to assign new column names to a dataframe $ class() as.Date(), option format = range() subset(), option select = str() repmis() package and its source_data() function save(), option file = load() rm() ls() Main types of vector classes in R: character, numeric, factor, date, logical Which classes of vectors don’t always look like numbers, but R assigns an underlying numeric value to? (Hint: We did not talk about this in class, but R saves the logical class with an underlying number, with TRUE = 1 and FALSE = 0. We did talk about other examples in class.) Common abbreviations for telling R date formats (e.g., “%m”, “%y”) Common logical expressions to use in subset() relative pathnames absolute pathnames delimited files fixed width files R script file (How would you make a new one? What file extension would it have? Why is it important to use? How do you run code from a script file in RStudio?) What kinds of data can be read into R? How to read flat files of data that are online directly into R if they are on: A “http:” site A “https:” site When you might want to save an R object as a .RData file and when (and why) you might not want to A.3 Week 3 data() (with and without the name of a dataset as an option) library() (with and without an argument in the parentheses) hist() plot() pairs() boxplot() (both for a single numeric variable and for a numeric vector stratified by a factor) common options for all these plotting functions: main =, xlab =, ylab =, xlim =, ylim =, col =, cex = with() range() min() max() mean() median() table() cor(), both for two variables in a dataframe, and to get the correlation matrix for several variables in a dataframe summary(), as applied to: different classes of vectors (numeric, factor, logical), dataframes, lm objects, and glm objects lm(), data= option glm(), options data=, family= Functions to apply to a lm or glm object: summary(), coef(), residuals(), fitted(), plot(), abline() The following elements that you can pull from the summary of a lm call: summary(mod_1)$call, summary(mod_1)$coef, summary(mod_1)$r.squared, summary(mod_1)$cov.unscaled How to create a logical vector and how to use one to (1) index a data frame and (2) count the number of times a certain condition is true in a vector What the bang operator (!) does to a logical operator What to do if you want to apply a summary statistic function to a vector with missing values (you do not need to know every option name for all the functions, just know that you would need to include an option like na.rm= or use=, and that you can use the help file for a function to figure out the option call for that function). Are there any circumstances where I (or Google) would recommend you use attach() and detach()? The following about object-oriented programming: In R, it means that some functions, like summary() and plot(), will do different things depending on what type of object you call it on. The basic structure of regression formulae in R (for example, y ~ x1 + x2) Difference between using lm() and glm() to fit a linear regression model Difference between the code you would use to fit a linear, Poisson, or logistic model using glm() Make sure you understand the difference in what you’d get for plot(x, y, data = my_data) and plot(lm(y ~ x, data = my_data)) A.4 Week 4 Guidelines for good graphics Data density / data-to-ink ratio Small multiples Edward Tufte Hadley Wickham differences between ggplot and R base graphics (you’re just responsible for knowing the ones listed in the lecture notes) Where to put the + in ggplot statements to avoid problems (ends of lines instead of starts of new lines) Can you save a ggplot object as an R object that you can reference later? If so, how would you add elements on to that object? How would you print it when you were ready to print the graph to your RStudio graphics window? ggplot() function, including aes() part of the call geom_point(), geom_line() geom_histogram() geom_hline(), geom_vline() geom_text() xlab(), ylab(), xlim(), ylim(), ggtitle() facet_grid() gridExtra package, including grid.arrange() and facet_wrap() ggthemes package, including theme_few() and theme_tufte() Setting point color for geom_point() both as a constant (all points red) and as a way to show the level of a factor for each observation size, alpha, color Re-naming and re-ordering factors Note: If you read this and find and bring in an example of a “small multiples” graph (from a newspaper, a website, an academic paper), you can get one extra point on this quiz A.5 Week 5 as.Date, including format= option format applied to Date objects (including what class the output of this function will be) Reproducible research, including what it is and advantages to aiming to make your research reproducible R style guidelines on variable names, attach(), &lt;- vs. =, line length, spacing, semicolons, commenting, indentation, and code grouping Markup languages (concept and examples) Basic conventions for Markdown (bold, italics, links, headers, lists) Literate programming What working directory R uses for code in an .Rmd document Basic syntax for RMarkdown chunks, including how to name them Options for RMarkdown chunks: echo, eval, messages, warnings, include, fig.width, fig.height, results Difference between global options and chunk options, and which takes precendence What inline code is and how to write it in RMarkdown How to set global options Why style is important in coding RPubs A.6 Week 6 with() Three characteristics of tidy data Five common problems with tidy data and how to resolve them (make sure you understand the examples shown, which you can find out more about in the Hadley Wickham paper I reference) select() filter() mutate() summarize() group_by() arrange() gather() spread() %&gt;% Go through the examples where I’ve chained together several functions to clean up a dataset and make sure you can follow through these chained examples A.7 Week 7 for loops basics of writing a function figuring out the output of a loop based on its code figuring the the output of a function based on its code parentheses around a full assignment statement (e.g., (ex &lt;- 1)) in-class exercise and example analysis from Oct. 12 course kable() from the knitr package A.8 Week 8 apply family of functions *_join family of functions matrix objects, including how to subset list objects, including how to subset Titanic example analysis from Oct. 19 course Using color =, size =, or shape = in the aes() statement of a ggplot() call geom_bar() geom_smooth(), including the se = and method = options jittering, the position = position_jitter() option in ggplot geoms "],
["appendix-b-homework.html", "B Appendix B: Homework B.1 Homework #1 B.2 Homework #2 B.3 Homework #3 B.4 Homework #4 B.5 Homework #5 B.6 Homework #6", " B Appendix B: Homework The following are six homework assignments for the course. B.1 Homework #1 Due date: Sept. 14 [basics in swirl homework assignment] B.2 Homework #2 Due date: Sept. 28 [R Markdown homework assignment] B.3 Homework #3 Due date: Oct. 12 [dplyr, tidy data homework assignment] B.4 Homework #4 Due date: Oct. 26 [Advanced R Markdown homework assignment] B.5 Homework #5 Due date: Nov. 9 [Homework on functions, regular expressions, and web data assignment] B.6 Homework #6 Due date: Nov. 30 [Mapping homework assignment] "],
["references.html", "References", " References "]
]
